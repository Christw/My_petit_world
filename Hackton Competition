{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the competition: https://www.hackerearth.com/challenges/competitive/hackerearth-machine-learning-challenge-predict-the-lowest-price/leaderboard/predict-the-lowest-price-8-9ffabe00/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import re\n",
    "from collections import Counter\n",
    "from statistics import mode\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV, cross_val_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\n",
    "from scipy import stats\n",
    "import datetime as dt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data wrangling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>Date</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>IT_2</td>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7</td>\n",
       "      <td>3574</td>\n",
       "      <td>4756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>IT_3</td>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.6</td>\n",
       "      <td>5978</td>\n",
       "      <td>9669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>IT_4</td>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5681</td>\n",
       "      <td>8313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>IT_5</td>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4924</td>\n",
       "      <td>7257</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Id        Date  State_of_Country  Market_Category  Product_Category  \\\n",
       "0    IT_1  2007-07-05                 0                0                 0   \n",
       "1    IT_2  2007-07-05                 0                1                 0   \n",
       "2    IT_3  2007-07-05                 0              103                 0   \n",
       "3    IT_4  2007-07-05                 0              103                 0   \n",
       "4    IT_5  2007-07-05                 0              103                 0   \n",
       "\n",
       "   Grade  Demand  Low_Cap_Price  High_Cap_Price  \n",
       "0      0     0.5           2785            4240  \n",
       "1      0     0.7           3574            4756  \n",
       "2      1     1.6           5978            9669  \n",
       "3      0     0.0           5681            8313  \n",
       "4      2     0.0           4924            7257  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9798, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>Date</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>IT_265079</td>\n",
       "      <td>2014-01-19</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>5303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>IT_265087</td>\n",
       "      <td>2014-01-19</td>\n",
       "      <td>0</td>\n",
       "      <td>268</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>IT_265107</td>\n",
       "      <td>2014-01-19</td>\n",
       "      <td>0</td>\n",
       "      <td>320</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.4</td>\n",
       "      <td>24706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>IT_265139</td>\n",
       "      <td>2014-01-19</td>\n",
       "      <td>17</td>\n",
       "      <td>358</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.5</td>\n",
       "      <td>23464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>IT_265142</td>\n",
       "      <td>2014-01-19</td>\n",
       "      <td>18</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6222</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Item_Id        Date  State_of_Country  Market_Category  Product_Category  \\\n",
       "0  IT_265079  2014-01-19                 0                3                 0   \n",
       "1  IT_265087  2014-01-19                 0              268                 0   \n",
       "2  IT_265107  2014-01-19                 0              320                 0   \n",
       "3  IT_265139  2014-01-19                17              358                 0   \n",
       "4  IT_265142  2014-01-19                18               23                 5   \n",
       "\n",
       "   Grade  Demand  High_Cap_Price  \n",
       "0      0     0.1            5303  \n",
       "1      2     1.4           10492  \n",
       "2      0    13.4           24706  \n",
       "3      3     5.5           23464  \n",
       "4      2     0.0            6222  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5763, 8)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>9798</td>\n",
       "      <td>9798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unique</td>\n",
       "      <td>9798</td>\n",
       "      <td>1070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>top</td>\n",
       "      <td>IT_68366</td>\n",
       "      <td>2007-07-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>freq</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Item_Id        Date\n",
       "count       9798        9798\n",
       "unique      9798        1070\n",
       "top     IT_68366  2007-07-06\n",
       "freq           1          44"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe(include=['object'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the context mentioned, people would buy some things during specific timing so time is an important factor. Now, we can either perform time-series or regression model. I choose to take advantage of regression model since it is easy to understand.\n",
    "As long as we decide to include time in our regression model, we have to convert time into other types so that we can apply it\n",
    "in our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#date>num for train\n",
    "train['Num_Date'] = pd.to_datetime(train['Date'])\n",
    "train['Num_Date']=train['Num_Date'].map(dt.datetime.toordinal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7</td>\n",
       "      <td>3574</td>\n",
       "      <td>4756</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_3</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.6</td>\n",
       "      <td>5978</td>\n",
       "      <td>9669</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_4</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5681</td>\n",
       "      <td>8313</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_5</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4924</td>\n",
       "      <td>7257</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Item_Id  State_of_Country  Market_Category  Product_Category  \\\n",
       "Date                                                                      \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_2                 0                1                 0   \n",
       "2007-07-05    IT_3                 0              103                 0   \n",
       "2007-07-05    IT_4                 0              103                 0   \n",
       "2007-07-05    IT_5                 0              103                 0   \n",
       "\n",
       "            Grade  Demand  Low_Cap_Price  High_Cap_Price  Num_Date  month  \\\n",
       "Date                                                                        \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.7           3574            4756    732862      7   \n",
       "2007-07-05      1     1.6           5978            9669    732862      7   \n",
       "2007-07-05      0     0.0           5681            8313    732862      7   \n",
       "2007-07-05      2     0.0           4924            7257    732862      7   \n",
       "\n",
       "            year  day  \n",
       "Date                   \n",
       "2007-07-05  2007    5  \n",
       "2007-07-05  2007    5  \n",
       "2007-07-05  2007    5  \n",
       "2007-07-05  2007    5  \n",
       "2007-07-05  2007    5  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime as dt\n",
    "\n",
    "#month/year/day transform\n",
    "train['Date'] = pd.to_datetime(train['Date'])\n",
    "train.set_index('Date', inplace=True)\n",
    "train.sort_index(inplace=True)\n",
    "train['month'] = train.index.month\n",
    "train['year'] = train.index.year\n",
    "train['day'] = train.index.day\n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "      <td>9798.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>14.278730</td>\n",
       "      <td>198.414064</td>\n",
       "      <td>2.492958</td>\n",
       "      <td>0.652072</td>\n",
       "      <td>71.977414</td>\n",
       "      <td>3500.273525</td>\n",
       "      <td>6349.838028</td>\n",
       "      <td>733316.725148</td>\n",
       "      <td>6.051439</td>\n",
       "      <td>2008.292202</td>\n",
       "      <td>15.560523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>8.760964</td>\n",
       "      <td>169.767862</td>\n",
       "      <td>4.751807</td>\n",
       "      <td>1.032439</td>\n",
       "      <td>927.194052</td>\n",
       "      <td>2188.046803</td>\n",
       "      <td>3652.780956</td>\n",
       "      <td>310.892109</td>\n",
       "      <td>3.306099</td>\n",
       "      <td>0.938576</td>\n",
       "      <td>8.680330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>163.000000</td>\n",
       "      <td>732862.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1863.250000</td>\n",
       "      <td>3878.250000</td>\n",
       "      <td>733072.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>129.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3124.000000</td>\n",
       "      <td>5552.500000</td>\n",
       "      <td>733258.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>389.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>10.175000</td>\n",
       "      <td>4667.500000</td>\n",
       "      <td>7993.750000</td>\n",
       "      <td>733567.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>23.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>471.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>64160.500000</td>\n",
       "      <td>17580.000000</td>\n",
       "      <td>58812.000000</td>\n",
       "      <td>733932.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       State_of_Country  Market_Category  Product_Category        Grade  \\\n",
       "count       9798.000000      9798.000000       9798.000000  9798.000000   \n",
       "mean          14.278730       198.414064          2.492958     0.652072   \n",
       "std            8.760964       169.767862          4.751807     1.032439   \n",
       "min            0.000000         0.000000          0.000000     0.000000   \n",
       "25%            3.000000        55.000000          0.000000     0.000000   \n",
       "50%           20.000000       129.000000          0.000000     0.000000   \n",
       "75%           21.000000       389.000000          1.000000     2.000000   \n",
       "max           23.000000       471.000000         17.000000     3.000000   \n",
       "\n",
       "             Demand  Low_Cap_Price  High_Cap_Price       Num_Date  \\\n",
       "count   9798.000000    9798.000000     9798.000000    9798.000000   \n",
       "mean      71.977414    3500.273525     6349.838028  733316.725148   \n",
       "std      927.194052    2188.046803     3652.780956     310.892109   \n",
       "min        0.000000       1.000000      163.000000  732862.000000   \n",
       "25%        0.500000    1863.250000     3878.250000  733072.000000   \n",
       "50%        2.000000    3124.000000     5552.500000  733258.000000   \n",
       "75%       10.175000    4667.500000     7993.750000  733567.000000   \n",
       "max    64160.500000   17580.000000    58812.000000  733932.000000   \n",
       "\n",
       "             month         year          day  \n",
       "count  9798.000000  9798.000000  9798.000000  \n",
       "mean      6.051439  2008.292202    15.560523  \n",
       "std       3.306099     0.938576     8.680330  \n",
       "min       1.000000  2007.000000     1.000000  \n",
       "25%       3.000000  2008.000000     8.000000  \n",
       "50%       6.000000  2008.000000    15.000000  \n",
       "75%       9.000000  2009.000000    23.000000  \n",
       "max      12.000000  2010.000000    31.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Demand can be categoried cuz it seems relevant to our topics\n",
    "Need to delete outlier!\n",
    "How to define low,medium,high demands? to fit what the context mentioned, like particular goods are needed when the price is low"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    825\n",
       "0.2    522\n",
       "0.1    483\n",
       "0.6    400\n",
       "1.2    289\n",
       "      ... \n",
       "7.4      8\n",
       "7.6      6\n",
       "7.5      5\n",
       "9.9      4\n",
       "8.8      4\n",
       "Name: Demand, Length: 100, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Demand\"].sort_values(ascending=False)\n",
    "k=train[train.Demand<10]\n",
    "k[\"Demand\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "bins = [0, 3, 500, 25000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Low       5737\n",
       "Medium    3862\n",
       "High       196\n",
       "Name: Demand-binned, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "group_names = ['Low','Medium','High']\n",
    "train['Demand-binned'] = pd.cut(train['Demand'], bins, labels=group_names, include_lowest=True )\n",
    "\n",
    "\n",
    "train['Demand-binned'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "      <th>Demand-binned</th>\n",
       "      <th>Grade_Obj</th>\n",
       "      <th>Grade_0</th>\n",
       "      <th>Grade_1</th>\n",
       "      <th>Grade_2</th>\n",
       "      <th>Grade_3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Item_Id  State_of_Country  Market_Category  Product_Category  \\\n",
       "Date                                                                      \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "\n",
       "            Grade  Demand  Low_Cap_Price  High_Cap_Price  Num_Date  month  \\\n",
       "Date                                                                        \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "\n",
       "            year  day Demand-binned  Grade_Obj  Grade_0  Grade_1  Grade_2  \\\n",
       "Date                                                                        \n",
       "2007-07-05  2007    5           Low          0        1        0        0   \n",
       "2007-07-05  2007    5           Low          0        1        0        0   \n",
       "2007-07-05  2007    5           Low          0        0        1        0   \n",
       "2007-07-05  2007    5           Low          0        1        0        0   \n",
       "2007-07-05  2007    5           Low          0        0        0        1   \n",
       "\n",
       "            Grade_3  \n",
       "Date                 \n",
       "2007-07-05        0  \n",
       "2007-07-05        0  \n",
       "2007-07-05        0  \n",
       "2007-07-05        0  \n",
       "2007-07-05        0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Grade can be categroied too.\n",
    "train['Grade_Obj']=train[\"Grade\"]\n",
    "k=pd.get_dummies(train['Grade_Obj'],prefix=\"Grade\")\n",
    "train=train.join(k)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Product cate can be tried?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     83866\n",
       "10    12781\n",
       "1      6619\n",
       "13     4456\n",
       "12     3062\n",
       "15     2209\n",
       "11      996\n",
       "16      917\n",
       "14      710\n",
       "7       565\n",
       "6       426\n",
       "5       330\n",
       "3       139\n",
       "4        62\n",
       "17       48\n",
       "8        35\n",
       "9        19\n",
       "Name: Product_Category, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Product_Category\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Market cate can be tried too?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>...</th>\n",
       "      <th>day</th>\n",
       "      <th>Demand-binned</th>\n",
       "      <th>Grade_Obj</th>\n",
       "      <th>Grade_0</th>\n",
       "      <th>Grade_1</th>\n",
       "      <th>Grade_2</th>\n",
       "      <th>Grade_3</th>\n",
       "      <th>Market_Category_Obj</th>\n",
       "      <th>State_of_Country_Obj</th>\n",
       "      <th>Product_Category_Obj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Item_Id  State_of_Country  Market_Category  Product_Category  \\\n",
       "Date                                                                      \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "\n",
       "            Grade  Demand  Low_Cap_Price  High_Cap_Price  Num_Date  month  \\\n",
       "Date                                                                        \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "\n",
       "            ...  day  Demand-binned Grade_Obj Grade_0  Grade_1  Grade_2  \\\n",
       "Date        ...                                                           \n",
       "2007-07-05  ...    5            Low         0       1        0        0   \n",
       "2007-07-05  ...    5            Low         0       1        0        0   \n",
       "2007-07-05  ...    5            Low         0       0        1        0   \n",
       "2007-07-05  ...    5            Low         0       1        0        0   \n",
       "2007-07-05  ...    5            Low         0       0        0        1   \n",
       "\n",
       "            Grade_3  Market_Category_Obj State_of_Country_Obj  \\\n",
       "Date                                                            \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "\n",
       "           Product_Category_Obj  \n",
       "Date                             \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Market_Category\"].value_counts()\n",
    "train[\"Market_Category_Obj\"]=train[\"Market_Category\"].astype(object)\n",
    "train[\"State_of_Country_Obj\"]=train[\"State_of_Country\"].astype(object)\n",
    "train[\"Product_Category_Obj\"]=train[\"Product_Category\"].astype(object)\n",
    "train['Grade_Obj']=train['Grade_Obj'].astype(object)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Demand-binned</th>\n",
       "      <th>Market_Category_Obj</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>3044.797386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Low</td>\n",
       "      <td>1</td>\n",
       "      <td>2315.226238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Low</td>\n",
       "      <td>2</td>\n",
       "      <td>4601.517730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Low</td>\n",
       "      <td>3</td>\n",
       "      <td>2164.615071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Low</td>\n",
       "      <td>4</td>\n",
       "      <td>1025.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>820</td>\n",
       "      <td>High</td>\n",
       "      <td>467</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>821</td>\n",
       "      <td>High</td>\n",
       "      <td>468</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>822</td>\n",
       "      <td>High</td>\n",
       "      <td>469</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>823</td>\n",
       "      <td>High</td>\n",
       "      <td>470</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>824</td>\n",
       "      <td>High</td>\n",
       "      <td>471</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>825 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Demand-binned  Market_Category_Obj  Low_Cap_Price\n",
       "0             Low                    0    3044.797386\n",
       "1             Low                    1    2315.226238\n",
       "2             Low                    2    4601.517730\n",
       "3             Low                    3    2164.615071\n",
       "4             Low                    4    1025.000000\n",
       "..            ...                  ...            ...\n",
       "820          High                  467            NaN\n",
       "821          High                  468            NaN\n",
       "822          High                  469            NaN\n",
       "823          High                  470            NaN\n",
       "824          High                  471            NaN\n",
       "\n",
       "[825 rows x 3 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# grouping results for demand vs. market_cate\n",
    "train_test = train[['Demand-binned','Market_Category_Obj','Low_Cap_Price']]\n",
    "grouped_test1 = train_test.groupby(['Demand-binned','Market_Category_Obj'],as_index=False).mean()\n",
    "grouped_test1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"21\" halign=\"left\">Low_Cap_Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Market_Category_Obj</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>461</th>\n",
       "      <th>462</th>\n",
       "      <th>463</th>\n",
       "      <th>464</th>\n",
       "      <th>465</th>\n",
       "      <th>467</th>\n",
       "      <th>468</th>\n",
       "      <th>469</th>\n",
       "      <th>470</th>\n",
       "      <th>471</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Demand-binned</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Low</td>\n",
       "      <td>3044.797386</td>\n",
       "      <td>2315.226238</td>\n",
       "      <td>4601.517730</td>\n",
       "      <td>2164.615071</td>\n",
       "      <td>1025.0</td>\n",
       "      <td>3052.905263</td>\n",
       "      <td>1346.512821</td>\n",
       "      <td>2779.0</td>\n",
       "      <td>5384.927711</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2654.341772</td>\n",
       "      <td>2972.288462</td>\n",
       "      <td>2051.770492</td>\n",
       "      <td>2323.0</td>\n",
       "      <td>3109.0</td>\n",
       "      <td>4244.467742</td>\n",
       "      <td>4020.03125</td>\n",
       "      <td>4476.962073</td>\n",
       "      <td>2582.589372</td>\n",
       "      <td>2298.830986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Medium</td>\n",
       "      <td>2206.128713</td>\n",
       "      <td>1014.981283</td>\n",
       "      <td>4363.112179</td>\n",
       "      <td>1836.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>748.47807</td>\n",
       "      <td>...</td>\n",
       "      <td>1635.000000</td>\n",
       "      <td>1808.871658</td>\n",
       "      <td>1571.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1153.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3737.993576</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2214.026071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>High</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 275 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Low_Cap_Price                                         \\\n",
       "Market_Category_Obj           0            1            2            3     \n",
       "Demand-binned                                                              \n",
       "Low                   3044.797386  2315.226238  4601.517730  2164.615071   \n",
       "Medium                2206.128713  1014.981283  4363.112179  1836.000000   \n",
       "High                          NaN          NaN          NaN          NaN   \n",
       "\n",
       "                                                                            \\\n",
       "Market_Category_Obj     4            6            7       8            9     \n",
       "Demand-binned                                                                \n",
       "Low                  1025.0  3052.905263  1346.512821  2779.0  5384.927711   \n",
       "Medium                  NaN          NaN          NaN     NaN          NaN   \n",
       "High                    NaN          NaN          NaN     NaN          NaN   \n",
       "\n",
       "                                ...                                         \\\n",
       "Market_Category_Obj        10   ...          461          462          463   \n",
       "Demand-binned                   ...                                          \n",
       "Low                        NaN  ...  2654.341772  2972.288462  2051.770492   \n",
       "Medium               748.47807  ...  1635.000000  1808.871658  1571.000000   \n",
       "High                       NaN  ...          NaN          NaN          NaN   \n",
       "\n",
       "                                                                           \\\n",
       "Market_Category_Obj     464     465          467         468          469   \n",
       "Demand-binned                                                               \n",
       "Low                  2323.0  3109.0  4244.467742  4020.03125  4476.962073   \n",
       "Medium                  NaN     NaN  1153.000000         NaN  3737.993576   \n",
       "High                    NaN     NaN          NaN         NaN          NaN   \n",
       "\n",
       "                                               \n",
       "Market_Category_Obj          470          471  \n",
       "Demand-binned                                  \n",
       "Low                  2582.589372  2298.830986  \n",
       "Medium                       NaN  2214.026071  \n",
       "High                         NaN          NaN  \n",
       "\n",
       "[3 rows x 275 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_pivot = grouped_test1.pivot(index='Demand-binned',columns='Market_Category_Obj')\n",
    "grouped_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>...</th>\n",
       "      <th>day</th>\n",
       "      <th>Demand-binned</th>\n",
       "      <th>Grade_Obj</th>\n",
       "      <th>Grade_0</th>\n",
       "      <th>Grade_1</th>\n",
       "      <th>Grade_2</th>\n",
       "      <th>Grade_3</th>\n",
       "      <th>Market_Category_Obj</th>\n",
       "      <th>State_of_Country_Obj</th>\n",
       "      <th>Product_Category_Obj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Item_Id  State_of_Country  Market_Category  Product_Category  \\\n",
       "Date                                                                      \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "\n",
       "            Grade  Demand  Low_Cap_Price  High_Cap_Price  Num_Date  month  \\\n",
       "Date                                                                        \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "\n",
       "            ...  day  Demand-binned Grade_Obj Grade_0  Grade_1  Grade_2  \\\n",
       "Date        ...                                                           \n",
       "2007-07-05  ...    5            Low         0       1        0        0   \n",
       "2007-07-05  ...    5            Low         0       1        0        0   \n",
       "2007-07-05  ...    5            Low         0       0        1        0   \n",
       "2007-07-05  ...    5            Low         0       1        0        0   \n",
       "2007-07-05  ...    5            Low         0       0        0        1   \n",
       "\n",
       "            Grade_3  Market_Category_Obj State_of_Country_Obj  \\\n",
       "Date                                                            \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "\n",
       "           Product_Category_Obj  \n",
       "Date                             \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Id                   object\n",
       "State_of_Country           int64\n",
       "Market_Category            int64\n",
       "Product_Category           int64\n",
       "Grade                      int64\n",
       "Demand                   float64\n",
       "Low_Cap_Price              int64\n",
       "High_Cap_Price             int64\n",
       "Num_Date                   int64\n",
       "month                      int64\n",
       "year                       int64\n",
       "day                        int64\n",
       "Demand-binned           category\n",
       "Grade_Obj                 object\n",
       "Grade_0                    uint8\n",
       "Grade_1                    uint8\n",
       "Grade_2                    uint8\n",
       "Grade_3                    uint8\n",
       "Market_Category_Obj       object\n",
       "State_of_Country_Obj      object\n",
       "Product_Category_Obj      object\n",
       "dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21a1e8b6148>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(nrows=1, figsize=(13, 13))\n",
    "sns.heatmap(train.corr(), annot=True, square=True, cmap='YlGnBu', linewidths=2, linecolor='black', annot_kws={'size':12})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the figures above, there are a few tests we need to perform to obtain the important variables.\n",
    "Categorical: Grade,Demand,Market,State,Product>>ANOVA \n",
    "Numerious:High_cap_price>>Pearson test\n",
    "6 tests in total!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Pearson Correlation Coefficient is 0.7284711303894023  with a P-value of P = 0.0\n"
     ]
    }
   ],
   "source": [
    "#High_price vs Low_price\n",
    "pearson_coef, p_value = stats.pearsonr(train['Low_Cap_Price'], train['High_Cap_Price'])\n",
    "print(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)  \n",
    "# high price okay!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ANOVA results: F= 745.7706909271534 , P = 1.43e-322\n",
      "ANOVA results: F= 123.44822237873814 , P = 1.1507339417789936e-28\n",
      "ANOVA results: F= 1330.4191445677845 , P = 0.0\n",
      "ANOVA results: F= 1330.4191445677845 , P = 0.0\n"
     ]
    }
   ],
   "source": [
    "#Demand vs Low_price\n",
    "grouped_test2=train[['Demand-binned', 'Low_Cap_Price']].groupby(['Demand-binned'])\n",
    "grouped_test2.get_group('Low')['Low_Cap_Price']\n",
    "\n",
    "# ANOVA\n",
    "f_val, p_val = stats.f_oneway(grouped_test2.get_group('Low')['Low_Cap_Price'], grouped_test2.get_group('Medium')['Low_Cap_Price'],grouped_test2.get_group('High')['Low_Cap_Price'])\n",
    " \n",
    "print( \"ANOVA results: F=\", f_val, \", P =\", p_val) \n",
    "\n",
    "f_val1, p_val1 = stats.f_oneway(grouped_test2.get_group('Low')['Low_Cap_Price'], grouped_test2.get_group('Medium')['Low_Cap_Price'])\n",
    " \n",
    "print( \"ANOVA results: F=\", f_val1, \", P =\", p_val1) \n",
    "f_val2, p_val2 = stats.f_oneway(grouped_test2.get_group('Low')['Low_Cap_Price'], grouped_test2.get_group('High')['Low_Cap_Price'],grouped_test2.get_group('High')['Low_Cap_Price'])\n",
    " \n",
    "print( \"ANOVA results: F=\", f_val2, \", P =\", p_val2) \n",
    "f_val3, p_val3 = stats.f_oneway(grouped_test2.get_group('Low')['Low_Cap_Price'], grouped_test2.get_group('High')['Low_Cap_Price'],grouped_test2.get_group('High')['Low_Cap_Price'])\n",
    " \n",
    "print( \"ANOVA results: F=\", f_val3, \", P =\", p_val3) \n",
    "#Demand okay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    79483\n",
       "2    20606\n",
       "3     9342\n",
       "1     7809\n",
       "Name: Grade_Obj, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Grade_Obj\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ANOVA results: F= 962.9872198385043 , P = 0.0\n"
     ]
    }
   ],
   "source": [
    "#Grade vs Low_price\n",
    "\n",
    "bins = [-1, 0.5, 1.5, 2.2, 3.3]\n",
    "group_names = ['Low','Medium_lower','Medium_higher','High']\n",
    "train['Grade_Obj'] = pd.cut(train['Grade'], bins, labels=group_names, include_lowest=True )\n",
    "grouped_test2=train[['Grade_Obj', 'Low_Cap_Price']].groupby(['Grade_Obj'])\n",
    "\n",
    "# ANOVA\n",
    "f_val4, p_val4 = stats.f_oneway(grouped_test2.get_group('Low')['Low_Cap_Price'], grouped_test2.get_group('Medium_lower')['Low_Cap_Price'],grouped_test2.get_group('Medium_higher')['Low_Cap_Price'],grouped_test2.get_group('High')['Low_Cap_Price'])\n",
    " \n",
    "print( \"ANOVA results: F=\", f_val4, \", P =\", p_val4) \n",
    "\n",
    "#Grade okay!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above tests, we know that that High price,Demand, Datetime, and Grade are crucial factors; we therefore try to apply\n",
    "regression model by using those variables to just see what the result can be. Why not State_of_Country, Product_cat, and Market_cat\n",
    "? This is becuase the person correlation for them is not so high and the number of each category is not well distributed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>...</th>\n",
       "      <th>day</th>\n",
       "      <th>Demand-binned</th>\n",
       "      <th>Grade_Obj</th>\n",
       "      <th>Grade_0</th>\n",
       "      <th>Grade_1</th>\n",
       "      <th>Grade_2</th>\n",
       "      <th>Grade_3</th>\n",
       "      <th>Market_Category_Obj</th>\n",
       "      <th>State_of_Country_Obj</th>\n",
       "      <th>Product_Category_Obj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>Low</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>Low</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>Low</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2007-07-05</td>\n",
       "      <td>IT_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>Low</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Item_Id  State_of_Country  Market_Category  Product_Category  \\\n",
       "Date                                                                      \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "2007-07-05    IT_1                 0                0                 0   \n",
       "\n",
       "            Grade  Demand  Low_Cap_Price  High_Cap_Price  Num_Date  month  \\\n",
       "Date                                                                        \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "2007-07-05      0     0.5           2785            4240    732862      7   \n",
       "\n",
       "            ...  day  Demand-binned Grade_Obj Grade_0  Grade_1  Grade_2  \\\n",
       "Date        ...                                                           \n",
       "2007-07-05  ...    5            Low       Low       1        0        0   \n",
       "2007-07-05  ...    5            Low       Low       1        0        0   \n",
       "2007-07-05  ...    5            Low       Low       0        1        0   \n",
       "2007-07-05  ...    5            Low       Low       1        0        0   \n",
       "2007-07-05  ...    5            Low       Low       0        0        1   \n",
       "\n",
       "            Grade_3  Market_Category_Obj State_of_Country_Obj  \\\n",
       "Date                                                            \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "2007-07-05        0                    0                    0   \n",
       "\n",
       "           Product_Category_Obj  \n",
       "Date                             \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "2007-07-05                    0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5995614747814569\n",
      "0.5499422628987085\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "i=train.drop(['Item_Id','Demand-binned', 'Grade_Obj', 'Grade_0', 'Grade_1',\n",
    "       'Grade_2', 'Grade_3', 'Market_Category_Obj', 'State_of_Country_Obj',\n",
    "       'Product_Category_Obj','Low_Cap_Price','State_of_Country','Market_Category','Product_Category'], axis=1)\n",
    "\n",
    "model_1=LinearRegression()\n",
    "model_1.fit(i,train.Low_Cap_Price)\n",
    "print(model_1.score(i,train.Low_Cap_Price))\n",
    "print(cross_val_score(model_1,i,train.Low_Cap_Price,cv=5).mean())\n",
    "\n",
    "# It shows that this model is too bad to use.\n",
    "# So let's include other three variables that we didn't include at the first place."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6398200287059193\n",
      "0.5951395931819647\n"
     ]
    }
   ],
   "source": [
    "i2=train.drop(['Item_Id','Demand-binned', 'Grade_Obj', 'Grade_0', 'Grade_1',\n",
    "       'Grade_2', 'Grade_3', 'Market_Category_Obj', 'State_of_Country_Obj',\n",
    "       'Product_Category_Obj','Low_Cap_Price'], axis=1)\n",
    "\n",
    "model_2=LinearRegression()\n",
    "model_2.fit(i2,train.Low_Cap_Price)\n",
    "print(model_2.score(i2,train.Low_Cap_Price))\n",
    "print(cross_val_score(model_2,i2,train.Low_Cap_Price,cv=5).mean())\n",
    "# Though the performance of the model is better than before, it is still not applicable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In terms of the performance of models, we decide to adopt other models! First, I have to delete the redundant variables I coined for EDA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=train.drop(['Item_Id','Demand-binned', 'Grade_Obj', 'Grade_0', 'Grade_1',\n",
    "       'Grade_2', 'Grade_3', 'Market_Category_Obj', 'State_of_Country_Obj',\n",
    "       'Product_Category_Obj'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "p=train.drop(['Low_Cap_Price'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "p.reset_index(inplace=True) # Resets the index, makes factor a column\n",
    "p.drop(\"Date\",axis=1,inplace=True) # drop factor from axis 1 and make changes permanent by inplace=True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "p.shape\n",
    "p=p.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test should have the same dimension of data as train.\n",
    "#date>num for train\n",
    "test['Num_Date'] = pd.to_datetime(test['Date'])\n",
    "test['Num_Date']=test['Num_Date'].map(dt.datetime.toordinal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#month/year/day transform for test\n",
    "test['Date'] = pd.to_datetime(test['Date'])\n",
    "test.set_index('Date', inplace=True)\n",
    "test.sort_index(inplace=True)\n",
    "test['month'] = test.index.month\n",
    "test['year'] = test.index.year\n",
    "test['day'] = test.index.day\n",
    "test.head()\n",
    "j=test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "j.reset_index(inplace=True) # Resets the index, makes factor a column\n",
    "j.drop(\"Date\",axis=1,inplace=True) # drop factor from axis 1 and make changes permanent by inplace=True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2785</td>\n",
       "      <td>4240</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7</td>\n",
       "      <td>3574</td>\n",
       "      <td>4756</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.6</td>\n",
       "      <td>5978</td>\n",
       "      <td>9669</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5681</td>\n",
       "      <td>8313</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4924</td>\n",
       "      <td>7257</td>\n",
       "      <td>732862</td>\n",
       "      <td>7</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     State_of_Country  Market_Category  Product_Category  Grade  Demand  \\\n",
       "0                   0                0                 0      0     0.5   \n",
       "35                  0                1                 0      0     0.7   \n",
       "70                  0              103                 0      1     1.6   \n",
       "105                 0              103                 0      0     0.0   \n",
       "140                 0              103                 0      2     0.0   \n",
       "\n",
       "     Low_Cap_Price  High_Cap_Price  Num_Date  month  year  day  \n",
       "0             2785            4240    732862      7  2007    5  \n",
       "35            3574            4756    732862      7  2007    5  \n",
       "70            5978            9669    732862      7  2007    5  \n",
       "105           5681            8313    732862      7  2007    5  \n",
       "140           4924            7257    732862      7  2007    5  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "o=train\n",
    "o.reset_index(inplace=True) # Resets the index, makes factor a column\n",
    "o.drop(\"Date\",axis=1,inplace=True) # drop factor from axis 1 and make changes permanent by inplace=True\n",
    "o=o.drop_duplicates()\n",
    "o.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'm going to run the mutiple models, and I then choose the best one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9754561801478796\n",
      "0.7245329622514225\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "model=RandomForestRegressor()\n",
    "model.fit(p,o.Low_Cap_Price)\n",
    "new_test=j.drop(['Item_Id'], axis=1)\n",
    "y_test=model.predict(new_test)\n",
    "print(model.score(p,o.Low_Cap_Price))\n",
    "print(cross_val_score(model,p,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8536946461691326\n",
      "0.74756827877687\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "\n",
    "model2=GradientBoostingRegressor()\n",
    "model2.fit(p,o.Low_Cap_Price)\n",
    "y_test2=model2.predict(new_test)\n",
    "print(model2.score(p,o.Low_Cap_Price))\n",
    "print(cross_val_score(model2,p,o.Low_Cap_Price,cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.630046029206427\n",
      "0.6022321066462595\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model3=LinearRegression()\n",
    "model3.fit(p,o.Low_Cap_Price)\n",
    "y_test3=model3.predict(new_test)\n",
    "print(model3.score(p,o.Low_Cap_Price))\n",
    "print(cross_val_score(model3,p,o.Low_Cap_Price,cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.20789957134109002\n",
      "0.0011310633489752442\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "model4=KNeighborsClassifier(n_neighbors=5)\n",
    "model4.fit(p,o.Low_Cap_Price)\n",
    "y_test4=model4.predict(new_test)\n",
    "print(model4.score(p,o.Low_Cap_Price))\n",
    "print(cross_val_score(model4,p,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.20789957134109002\n",
      "0.0011310633489752442\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "model5=KNeighborsClassifier(n_neighbors=5)\n",
    "model5.fit(p,o.Low_Cap_Price)\n",
    "y_test5=model5.predict(new_test)\n",
    "print(model5.score(p,o.Low_Cap_Price))\n",
    "print(cross_val_score(model5,p,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9734798949116223\n",
      "0.7229286189400638\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBRegressor\n",
    "\n",
    "model6 = XGBRegressor()\n",
    "# Add silent=True to avoid printing out updates with each cycle\n",
    "model6.fit(p,o.Low_Cap_Price)\n",
    "# make predictions\n",
    "predictions = model6.predict(new_test)\n",
    "print(model6.score(p,o.Low_Cap_Price))\n",
    "print(cross_val_score(model6,p,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5911300243906659\n",
      "0.5736443578067233\n"
     ]
    }
   ],
   "source": [
    "p_1=p.drop(['State_of_Country','Market_Category','Product_Category'], axis=1)\n",
    "model7=LinearRegression()\n",
    "model7.fit(p_1,o.Low_Cap_Price)\n",
    "g=new_test.drop(['State_of_Country','Market_Category','Product_Category'], axis=1)\n",
    "y_test7=model7.predict(g)\n",
    "print(model7.score(p_1,o.Low_Cap_Price))\n",
    "print(cross_val_score(model7,p_1,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In conclusion, model2 is the best model becuase it doesn't overfit and the score is the highest.\n",
    "That is, gradientBoostingRegressor has the best performance so we decide to use this model!\n",
    "Now, based on the model, I wonder if I can gain better results by changing the varaibles.(Backward selection)\n",
    "Then, I put in the grading system of Hackton."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8502547954145062\n",
      "0.7488202488595459\n"
     ]
    }
   ],
   "source": [
    "p_1=p.drop(['Num_Date'], axis=1)\n",
    "model8=GradientBoostingRegressor()\n",
    "model8.fit(p_1,o.Low_Cap_Price)\n",
    "g=new_test.drop(['Num_Date'], axis=1)\n",
    "y_test8=model8.predict(g)\n",
    "print(model8.score(p_1,o.Low_Cap_Price))\n",
    "print(cross_val_score(model8,p_1,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8429671421938212\n",
      "0.7541079890083329\n"
     ]
    }
   ],
   "source": [
    "p_1=p.drop([\"Num_Date\",\"year\",\"Market_Category\"], axis=1)\n",
    "model9=GradientBoostingRegressor()\n",
    "model9.fit(p_1,o.Low_Cap_Price)\n",
    "g1=new_test.drop([\"Num_Date\",\"year\",\"Market_Category\"], axis=1)\n",
    "y_test9=model9.predict(g1)\n",
    "print(model9.score(p_1,o.Low_Cap_Price))\n",
    "print(cross_val_score(model9,p_1,o.Low_Cap_Price,cv=5).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In conclusion, model9 is the best predictor until now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "test[\"Low_Cap_Price\"]=pd.DataFrame(data=y_test9)\n",
    "test[\"Low_Cap_Price\"]=test[\"Low_Cap_Price\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Id</th>\n",
       "      <th>State_of_Country</th>\n",
       "      <th>Market_Category</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Demand</th>\n",
       "      <th>High_Cap_Price</th>\n",
       "      <th>Num_Date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "      <th>Low_Cap_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>IT_265079</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>5303</td>\n",
       "      <td>735252</td>\n",
       "      <td>1</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>2067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>IT_265087</td>\n",
       "      <td>0</td>\n",
       "      <td>268</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10492</td>\n",
       "      <td>735252</td>\n",
       "      <td>1</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>3265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>IT_265107</td>\n",
       "      <td>0</td>\n",
       "      <td>320</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.4</td>\n",
       "      <td>24706</td>\n",
       "      <td>735252</td>\n",
       "      <td>1</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>3509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>IT_265139</td>\n",
       "      <td>17</td>\n",
       "      <td>358</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.5</td>\n",
       "      <td>23464</td>\n",
       "      <td>735252</td>\n",
       "      <td>1</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>9856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>IT_265142</td>\n",
       "      <td>18</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6222</td>\n",
       "      <td>735252</td>\n",
       "      <td>1</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>2502</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Item_Id  State_of_Country  Market_Category  Product_Category  Grade  \\\n",
       "0  IT_265079                 0                3                 0      0   \n",
       "1  IT_265087                 0              268                 0      2   \n",
       "2  IT_265107                 0              320                 0      0   \n",
       "3  IT_265139                17              358                 0      3   \n",
       "4  IT_265142                18               23                 5      2   \n",
       "\n",
       "   Demand  High_Cap_Price  Num_Date  month  year  day  Low_Cap_Price  \n",
       "0     0.1            5303    735252      1  2014   19           2067  \n",
       "1     1.4           10492    735252      1  2014   19           3265  \n",
       "2    13.4           24706    735252      1  2014   19           3509  \n",
       "3     5.5           23464    735252      1  2014   19           9856  \n",
       "4     0.0            6222    735252      1  2014   19           2502  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = pd.DataFrame({'Item_Id':test['Item_Id'],'Low_Cap_Price':test[\"Low_Cap_Price\"]})\n",
    "submission.to_csv('predict_the_lowest_price14.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
